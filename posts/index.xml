<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 赵凯的博客</title>
    <link>https://1060146865.github.io/posts/</link>
    <description>Recent content in Posts on 赵凯的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-ch</language>
    <lastBuildDate>Thu, 30 Jul 2020 18:38:29 +0800</lastBuildDate>
    
	<atom:link href="https://1060146865.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>bind、call、apply</title>
      <link>https://1060146865.github.io/2020/bindcallapply/</link>
      <pubDate>Thu, 30 Jul 2020 18:38:29 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2020/bindcallapply/</guid>
      <description>bind、call、apply都是用来指定一个函数内部的this的值 实现call Function.prototype.call2 = function(context, ...args) { context = (context === undefined || context === null) ? window : context context.__fn = this let result = context.__fn(...args) delete context.__fn return result }  实现apply Function.prototype.apply2 = function(context, args) { context = (context === undefined || context === null) ? window : context context.__fn = this let result = context.__fn(...args) delete context.__fn return result }  实现bind Function.prototype.bind2 = function(context, .</description>
    </item>
    
    <item>
      <title>JS 数组去重</title>
      <link>https://1060146865.github.io/2020/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</link>
      <pubDate>Tue, 28 Jul 2020 18:38:29 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2020/js%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/</guid>
      <description>数组去重 Map const arr = [3, 1, 1, 2, 5, 9, 3, 0] const deduplication1 = arr =&amp;gt; { let map = new Map() arr.forEach(v =&amp;gt; map.set(v, 1)) return [...map.keys()] }; console.log(deduplication1(arr));  Set const arr = [3, 1, 1, 2, 5, 9, 3, 0] const deduplication2 = arr =&amp;gt; [...new Set(arr)]; console.log(deduplication2(arr))  reduce const arr = [3, 1, 1, 2, 5, 9, 3, 0] const deduplication3 = arr =&amp;gt; arr.</description>
    </item>
    
    <item>
      <title>JS 数组</title>
      <link>https://1060146865.github.io/2020/js%E6%95%B0%E7%BB%84/</link>
      <pubDate>Sun, 26 Jul 2020 17:38:29 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2020/js%E6%95%B0%E7%BB%84/</guid>
      <description>js数组 数组是一种类列表对象，它的原型中提供了遍历和修改元素的相关操作。JavaScript 数组的长度和元素类型都是非固定的。因为数组的长度可随时改变，并且其数据在内存中也可以不连续，所以 JavaScript 数组不一定是密集型的，这取决于它的使用方式。只能用整数作为数组元素的索引，而不能用字符串。
创建数组 let a =[1,2,3] let a = new Array(&amp;quot;1&amp;quot;,&amp;quot;2&amp;quot;,&amp;quot;3&amp;quot;)  数组的静态方法 Array.isArray()
Array.isArray方法返回一个布尔值，表示参数是否为数组。它可以弥补typeof运算符的不足。
var arr = [1, 2, 3]; typeof arr // &amp;quot;object&amp;quot; Array.isArray(arr) // true  数组的实例方法 Array.length 返回或设置一个数组中的元素个数。该值是一个无符号 32-bit 整数，并且总是大于数组最高项的下标。
const a =[1,2,3]; console.log(a.length); // 3  Array.at() at()方法接受一个整数值并返回该索引处的项目，允许正整数和负整数。负整数从数组中的最后一项开始计数。
const array1 = [5, 12, 8, 130, 44]; undefined console.log(array1.at(3)) // 130  Array.concat() concat()方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。
const a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]; const b = [&#39;d&#39;, &#39;e&#39;, &#39;f&#39;]; const c = a.</description>
    </item>
    
    <item>
      <title>JS 的运算符和数据类型转换</title>
      <link>https://1060146865.github.io/2020/js%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 24 Jul 2020 16:38:29 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2020/js%E7%9A%84%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>运算符  算术运算符
 +, -, *, /, % 一般用来计算数值 当+号任意一边出现字符时，+号的功能就是字符拼接 -, *, /, %会将两边的数据作为数值型数据计算  关系（比较）运算符
 &amp;gt;, &amp;gt;=, &amp;lt;, &amp;lt;=, ==, ===, !=, !== == 如果两边操作数相等时返回true。 != 如果两边操作数不相等时返回true === 两边操作数相等且类型相同时返回true。 !== 两边操作数不相等或类型不同时返回true。  赋值运算符
 =, +=, -=, *=, /=, %= =表示将右侧的数据放在左侧的变量中，重复赋值会覆盖原值 +=, -=, *=, /=, %=的规则请参考算术运算符  逻辑运算符
 或：|| 且（与）：&amp;amp;&amp;amp; 非：!  一元运算符
 ++：自增1，在自身原有基础上增加1 --：自减1，在自身原有基础上减少1 前(++i)：先计算，后使用 后(i++)：先使用，再计算  隐式类型转换
 计算过程中不按照原本的数据类型计算，而是默认作为其他数据类型计算，该过程称为数据   数据类型转换  隐式类型转换：计算过程中不按照原本的数据类型计算，而是作为其他数据类型计算</description>
    </item>
    
    <item>
      <title>JS 函数的执行时机</title>
      <link>https://1060146865.github.io/2020/js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Tue, 21 Jul 2020 15:38:29 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2020/js-%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>1.为什么如下代码会打印 6 个 6 let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) }  因为setTimeout的意思是稍后执行，也就是在等for循环结束之后再执行console.log(i)，当for结束循环的时候i等于6，且只有1个i，所以打印出6个6
2.如何让以上代码打印出0&amp;ndash;6 for(let i=0;i&amp;lt;6;i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) }  因为JS在for和let一起用的时候会在每次循环的时候多创建一个i，每次循环都会重新创建一个i，所以会打印出0，1，2，3，4，5
 let i for(i = 0; i&amp;lt;6; i++){ const x = i setTimeout(()=&amp;gt;{ console.log(x) }) }   let i for(i = 0; i&amp;lt;6; i++){ !function(j){ setTimeout(()=&amp;gt;{ console.log(j) },0) }(i) }   for(var i=0;i&amp;lt;6;i++){ (function(i){ setTimeout(()=&amp;gt;{console.log(i)},0) })(i) }  let i = 0 for(i = 0; i&amp;lt;6; i++){ setTimeout((i)=&amp;gt;{ console.</description>
    </item>
    
    <item>
      <title>JS 对象基本用法</title>
      <link>https://1060146865.github.io/2020/js-%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Wed, 01 Jul 2020 22:14:26 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2020/js-%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>JS 对象基本用法 声明对象的方法 let obj ={&#39;name&#39;:&#39;zz&#39;,&#39;age&#39;:18} //简单 let obj =new Object({&#39;name&#39;:&#39;zz&#39;,&#39;age&#39;:18}) //规范   注意 键名是字符串，不是标识符，可以包含任意字符 引号可以省略，省略之后只能写标识符，键名有空格是不可以省略 就算引号省略了，键名还是字符串  奇怪的属性值  所有属性名都会自动变成字符串
let obj ={ 1:&#39;a&#39;, 1e2:true,//会自动计算后再转为字符串 0XXF:false //会自动转化为10进制再转为字符串}   隐藏属性  JS里每个对象都有一个隐藏属性 这个隐藏属性储存着其共有属性组成的对象的地址 这个共有属性组成的对象叫做原型 也就是说隐藏属性储存着原型的地址
var obj{} obj.toString()//不报错 因为obj的隐藏属性对应的对象上有toString   原型  每个对象都有原型 原型里存着对象的共有属性 比如obj的原型就是一个对象 obj._proto__存着这个对象的地址 这个对象里有toString/constructor/valueOf等属性 对象的原型也是对象
 对象的原型也有原型
 obj={}的原型即为所有对象的原型
 这个原型包含所有对象的共有属性，是对象的根
 这个原型也有也有原型，是null
  删除对象的属性 obj.name = undefined //只删除属性值 delete obj.name //删除属性名和属性值 delete obj[&#39;name&#39;] //删除属性名和属性值 &#39;name&#39; in obj //检查obj是否含有属性名 &#39;name&#39; in obj &amp;amp;&amp;amp; obj.</description>
    </item>
    
    <item>
      <title>JS的基本语法</title>
      <link>https://1060146865.github.io/2020/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Mon, 29 Jun 2020 18:58:55 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2020/js%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</guid>
      <description>什么是表达式和语句 var a = 1 + 3;  1 + 3叫做表达式,表达式不需要分号结尾。语句以分号结尾，一个分号就表示一个语句结束。
语句和表达式的区别在于，前者主要为了进行某种操作，一般情况下不需要返回值；后者则是为了得到返回值，一定会返回一个值。
标识符的规则 标识符指的是用来识别各种值的合法名称。
标识符命名规则如下
 第一个字符，可以是任意 Unicode 字母（包括英文字母和其他语言的字母），以及美元符号（$）和下划线（_）。 第二个字符及后面的字符，除了 Unicode 字母、美元符号和下划线，还可以用数字0-9。  if else 语句 if (m === 1) { // 满足条件时，执行的语句 } else { // 不满足条件时，执行的语句 }  对同一个变量进行多次判断时，多个if&amp;hellip;else语句可以连写在一起。
if (m === 0) { // ... } else if (m === 1) { // ... } else if (m === 2) { // ... } else { // .</description>
    </item>
    
    <item>
      <title>JavaScript 的诞生</title>
      <link>https://1060146865.github.io/2020/javascript-%E7%9A%84%E8%AF%9E%E7%94%9F/</link>
      <pubDate>Mon, 08 Jun 2020 17:17:13 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2020/javascript-%E7%9A%84%E8%AF%9E%E7%94%9F/</guid>
      <description>JavaScript 的诞生 1994 年，网景公司（Netscape）发布了 Navigator 浏览器0.9版。这是历史上第一个比较成熟的网络浏览器，轰动一时。但是，这个版本的浏览器只能用来浏览，不具备与访问者互动的能力。网景公司急需一种网页脚本语言，使得浏览器可以与网页互动。
当时的形势就是，网景公司的整个管理层，都是 Java 语言的信徒，Sun 公司完全介入网页脚本语言的决策。
此时，34 岁的系统程序员 Brendan Eich 登场了。1995 年 4 月，网景公司录用了他。
Brendan Eich 的主要方向和兴趣是函数式编程，网景公司招聘他的目的，是研究将 Scheme 语言作为网页脚本语言的可能性。Brendan Eich 本人也是这样想的，以为进入新公司后，会主要与 Scheme 语言打交道。
仅仅一个月之后，1995年5月，网景公司做出决策，未来的网页脚本语言必须”看上去与 Java 足够相似”，但是比 Java 简单，使得非专业的网页作者也能很快上手。这个决策实际上将 Perl、Python、Tcl、Scheme 等非面向对象编程的语言都排除在外了。
Brendan Eich 被指定为这种”简化版Java语言”的设计师。
但是，他对 Java 一点兴趣也没有。为了应付公司安排的任务，他只用 10 天时间就把 Javascript 设计出来了。
“与其说我爱 Javascript，不如说我恨它。它是 C 语言和 Self 语言一夜情的产物。十八世纪英国文学家约翰逊博士说得好：’它的优秀之处并非原创，它的原创之处并不优秀。’” ——Brendan Eich
就是这样一个连发明这门语言的人都不待见，只用了 10 天时间草草完工的语言竟然成了世界上使用最广泛的语言之一，实在是充满了传奇色彩。
JavaScript 的历史 它最初由Netscape的Brendan Eich设计。JavaScript是甲骨文公司的注册商标。Ecma国际以JavaScript为基础制定了ECMAScript标准。JavaScript也可以用于其他场合，如服务器端编程。完整的JavaScript实现包含三个部分：ECMAScript，文档对象模型，浏览器对象模型。
Netscape在最初将其脚本语言命名为LiveScript，后来Netscape在与Sun合作之后将其改名为JavaScript。JavaScript最初受Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自Java。但JavaScript的主要设计原则源自Self和Scheme。JavaScript与Java名称上的近似，是当时Netscape为了营销考虑与Sun微系统达成协议的结果。尽管JavaScript作为给非程序人员的脚本语言，而非作为给程序人员的脚本语言来推广和宣传，但是JavaScript具有非常丰富的特性。
发展初期，JavaScript的标准并未确定，同期有Netscape的JavaScript，微软的JScript和CEnvi的ScriptEase三足鼎立。1997年，在ECMA（欧洲计算机制造商协会）的协调下，由Netscape、Sun、微软、Borland组成的工作组确定统一标准：ECMA-262。
JavaScript缺陷 http://www.ruanyifeng.com/blog/2011/06/10_design_defects_in_javascript.html</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>https://1060146865.github.io/2020/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Mon, 25 May 2020 19:36:56 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2020/%E6%B5%85%E6%9E%90url/</guid>
      <description> URL  URL(Uniform Resource Locator)：统一资源定位符 URL的组成：协议+域名+端口+路径+查询参数+锚点 URL举例：https://www.baidu.com/s?wd=URL&amp;amp;rsv_spt=1#5  协议：https ，在Internet中可以使用多种协议，如HTTP，FTP等等。 域名：www.baidu.com 路径：/s 查询参数：?wd=URL&amp;amp;rsv_spt=1 锚点：“#”开始到最后，都是锚点（不在network中显示，只和本地有关） 端口：http的默认端口是80，https的默认端口是443   IP  IP(Internet protocol)：网络协议 IP的两个作用  定位一台设备 定义了如何封装数据，以及和其他设备交流  与IP协议配套使用的还有四个协议  地址解析协议（Address Resolution Protocol，ARP） 逆地址解析协议（Reverse Address Resolution Protocol，RARP） 网际控制报文协议（Internet Control Message Protocol，ICMP） 网际组管理协议（Internet Group Management Protocol，IGMP）   DNS  DNS(Domain Name System):域名系统协议
 进行主机名到IP地址的转换 主机别名：有些主机的主机名比较复杂，可以为该主机起多个简单易记的别名。应用程序可以调用DNS来获得主机别名对应的规范主机名（不是别名的主机名）及主机的IP地址 负载分配：DNS允许用同一个主机名对应一个IP地址集合。DNS服务器收到该主机名的解析请求时，随机或循环返回地址集合中的一个地址。一些热门网站，可以利用该服务将网站复制到多个服务器上，这些服务器共用同一个域名，从而实现在这些服务器上的负载分配。 方向域名解析：有时某些应用需要将某个IP地址转换为域名，这可以通过方向域来实现。
域名  域名就是IP的别称，一个域名可以对应不同IP，一个IP可以对应不同域名。
 域名的结构由若干个分量组成，各分量之间用.隔开
…….三级域名.二级域名.顶级域名  域名等级
 国家顶级域名：cn,us 通用顶级域名：com,net,org,int,edu,gov,mil   </description>
    </item>
    
    <item>
      <title>CSS笔记</title>
      <link>https://1060146865.github.io/2019/css%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 05 Sep 2019 17:20:40 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2019/css%E7%AC%94%E8%AE%B0/</guid>
      <description>表单  作用：存储用户信息
 声明表单 form
 表单控件 &amp;lt;input type=&amp;quot;text&amp;quot;/&amp;gt;  表单控件的提示信息 
 属性
text 文本框 password 密码框 submit 提交按钮 reset 重置按钮 button 空按钮 radio 单选按钮 checkbox 多选按钮   表单控件input的属性 value 是input的内容，可以更改按钮的内容，也可以是文本框里提交的值（占位） name 可以设置radio单选功能，需要name值相同 checked 单选框和多选的默认选中 id 给input起名字，可以label的for属性关联    css层叠样式表 样式表 创建css的方式，设置css语句的地方
内部样式表
行内样式表
外部样式表
外部导入样式表
选择器 选择器整体分为5大类： 基本选择器、层次选择器、伪类选择器、属性选择器、伪对象（伪元素）选择器  基本选择器 1、通配符选择器 * 选择网页范围内所有的内容 * { margin: 0px; /* margin外边距 */ padding: 0px; /* padding内边距 */ } 2、 标记选择器、类型元素器（标签名） 栗子： 选择的是网页内的所有div标签 div { color: red; } 3、 class选择器，名字可以重复使用 html结构 &amp;lt;div class=&amp;quot;box2 font30&amp;quot;&amp;gt;老三 张三&amp;lt;/div&amp;gt; css样式 .</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>https://1060146865.github.io/2019/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Mon, 26 Aug 2019 19:25:40 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2019/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>1.&amp;lt;a&amp;gt;标签的用法 &amp;lt;a&amp;gt;标签表示超链接，用于从一张页面链接到另一张页面。
&amp;lt;a&amp;gt; 标签的 href 属性
它指示链接的目标。可以是网址，路径，伪协议，id。
 网址&amp;lt;a href=&amp;quot;https://baidu.com&amp;quot;&amp;gt;百度&amp;lt;/a&amp;gt;
 路径&amp;lt;a href=&amp;quot;./index.html&amp;quot;&amp;gt;index&amp;lt;/a&amp;gt;
 javascript:代码;&amp;lt;a href=&amp;quot;javascript:;&amp;quot;&amp;gt;空的伪协议&amp;lt;/a&amp;gt;
 id&amp;lt;a href=&amp;quot;#xxx&amp;quot;&amp;gt;xxx&amp;lt;/a&amp;gt;
 邮件链接&amp;lt;a href=&amp;quot;mailto:1060146865@qq.com&amp;quot;&amp;gt;联系我&amp;lt;/a&amp;gt;
 电话链接&amp;lt;a href=&amp;quot;tel:123456789&amp;quot;&amp;gt;123456789&amp;lt;/a&amp;gt;
  target 属性指定如何展示打开的链接。它可以是在指定的窗口打开，也可以在&amp;lt;iframe&amp;gt;里面打开。
&amp;lt;a href=&amp;quot;http://foo.com&amp;quot; target=&amp;quot;test&amp;quot;&amp;gt;foo&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;quot;http://bar.com&amp;quot; target=&amp;quot;test&amp;quot;&amp;gt;bar&amp;lt;/a&amp;gt;  上面代码中，两个链接都在名叫 test 的窗口打开。首先点击链接 foo，浏览器发现没有叫做 test 的窗口，就新建一个窗口，起名为 test，在该窗口打开foo.com。然后，用户又点击链接bar，由于已经存在test窗口，浏览器就在该窗口打开bar.com，取代里面已经打开的foo.com。
target属性的值
 _self：当前窗口打开，这是默认值。 _blank：新窗口打开。 _parent：上层窗口打开，这通常用于从父窗口打开的子窗口，或者&amp;lt;iframe&amp;gt;里面的链接。如果当前窗口没有上层窗口，这个值等同于_self。 _top：顶层窗口打开。如果当前窗口就是顶层窗口，这个值等同于 _self。  &amp;lt;a&amp;gt; 标签的 download属性
download属性表明当前链接用于下载，而不是跳转到另一个 URL。不是所有浏览器都支持，尤其是手机浏览器可能不支持。
&amp;lt;a href=&amp;quot;demo.txt&amp;quot; download&amp;gt;下载&amp;lt;/a&amp;gt;  2.&amp;lt;img&amp;gt; 标签的用法 &amp;lt;img&amp;gt;标签用于插入图片。它是单独使用的，没有闭合标签。作用是发出一个 get 请求，展示一张图片。
&amp;lt;img&amp;gt; 标签的属性
 src属性指定图片的网址。 alt属性用来设定图片的文字说明。图片不显示时（比如下载失败，或用户关闭图片加载），图片的位置上会显示该文本。 width 属性，height 属性,图片默认以原始大小插入网页，width 属性和 height 属性可以指定图片显示时的宽度和高度，单位是像素或百分比。只设置一个宽度高度会自适应。</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>https://1060146865.github.io/2019/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Sat, 24 Aug 2019 19:25:40 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2019/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>1.HTML 是谁发明的 HTML 的全名是“超文本标记语言”（HyperText Markup Language），上个世纪 90 年代由欧洲核子研究中心的物理学家蒂姆·伯纳斯-李（Tim Berners-Lee）发明。它的最大特点就是支持超链接，可以跳转到其他网页，从而构成了整个互联网。1999 年，HTML 4.01 版发布，成为广泛接受的 HTML 标准。2014 年，HTML 5 发布，这是目前正在使用的版本。
2.HTML 起手应该写什么 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt; &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt; &amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt;&amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;  &amp;lt;!DOCTYPE html&amp;gt;表示文档类型，告诉浏览器如何解析网页。
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;表示网页内容的语言，可以改成zh-CN。
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot; /&amp;gt;文件的字符编码。
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;禁用缩放，兼容手机。
&amp;lt;meta http-equiv=&amp;quot;X-UA-Compatible&amp;quot; content=&amp;quot;ie=edge&amp;quot; /&amp;gt;告诉 IE 使用最新的内核。
&amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt;设置网页标题。
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;&amp;lt;/body&amp;gt;浏览器显示的页面内容。
&amp;lt;/html&amp;gt;标签是网页的顶层容器，也称为根元素。
3.常用的表章节的标签 &amp;lt;h1&amp;gt;~&amp;lt;h6&amp;gt;用来表示文章的标题。按照标题的等级，一共分成六级。
&amp;lt;header&amp;gt;表示整个网页的头部。
&amp;lt;footer&amp;gt;网页的的尾部。
&amp;lt;main&amp;gt;标签表示页面的主体内容。</description>
    </item>
    
    <item>
      <title>CSS 知识小总结</title>
      <link>https://1060146865.github.io/2019/css-%E7%9F%A5%E8%AF%86%E5%B0%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 19 Aug 2019 20:25:40 +0800</pubDate>
      
      <guid>https://1060146865.github.io/2019/css-%E7%9F%A5%E8%AF%86%E5%B0%8F%E6%80%BB%E7%BB%93/</guid>
      <description> 浏览器渲染原理: 1.浏览器渲染过程：
 根据HMTL创建HTML树（DOM） 根据CSS创建CSS树（CSSOM） 将两棵树合并成一颗渲染树（render tree） Layout布局（文档流/盒模型/计算大小和位置） Paint绘制（把边框颜色/文字颜色/阴影等画出来） Compose合成（根据层叠关系展示画面）  2.更新的方式
CSS 动画的两种做法（transition 和 animation） transition是过渡的意思，它只有开始帧和结束帧，中间的过程浏览器用你指定的属性自动完成，你无法自己控制
 inline元素不支持transition，先变成block 并不是所有属性都能过渡例如：display:none=&amp;gt;block没有办法过渡，一般改为 visibility:hidden=&amp;gt;visible；  animation是动画的意思，它包含多个关键帧，通过控制帧，可以做出复杂的动画
 语法  animation：时长 过渡方式 延迟 次数 方向 填充模式 是否暂停 动画名 时长：1s或1000ms 过渡方式：跟transition取值一样 次数：3或2.4或infinite（无穷尽） 方向：reverse（相反）/alternate（轮流）/alternate-reverse（交替反转） 填充模式：none/forwards/backwards/both 是否暂停：paused/running   </description>
    </item>
    
  </channel>
</rss>